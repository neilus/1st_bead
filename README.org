#+title: Programozási technológia 1.
#+subtitle: 1. beadanó
#+author: Sana Norbert
#+email: neilus@elte.hu


#+language: hu

#+toc: 2



* 1. Feladat

Egy többnapos versenyen lények vesznek részt. Ki nyeri a versenyt, 
azaz melyik lény teszi meg a legnagyobb távolságot úgy, hogy
 közben _életben marad?_ Kezdetben minden lény valamennyi vízzel 
rendelkezik, és a megtett távolsága 0. A verseny során háromféle nap
 lehetséges: /napos/, /felhős/ és /esős/. Ezekre a különböző fajtájú 
lények eltérő módon reagálnak vizfogyasztás és haladás szempontjából.
 Minden lény először a rendelkezésre álló víz mennyiségét változtatja meg,
 ezután ha tud, mozog. Bármely lény elpusztul, ha a vize elfogy (0 lesz az érték),
 ezután értelemszerűen semmilyen tevékenységre sem képes.
Minden lény jellemzői:
- az _egyedi neve (string)_,
- a _rendelkezésre álló víz mennyisége (egész)_,
- a _maximálisan tárolható víz mennyisége (egész)_,
- hogy _él-e (logikai)_,
- illetve az _eddig megtett távolság (egész)_.
 A versenyen részt vevő lények fajtái a következők:
 =homokjáró, szivacs, lépegető=.
A következő táblázat tartalmazza az egyes fajták jellemzőit:

| fajta     |       | víz változtatás |      |       | távolság |      | max víz |
|-----------+-------+-----------------+------+-------+----------+------+---------|
|           | napos |          felhős | esős | napos |   felhős | esős |         |
|-----------+-------+-----------------+------+-------+----------+------+---------|
| homokjáró |    -1 |               0 |    3 |     3 |        1 |    0 |       8 |
| szivacs   |    -4 |              -1 |    6 |     0 |        1 |    3 |      20 |
| lépegető  |    -2 |              -1 |    3 |     1 |        2 |    1 |      12 |

Az egyes lények a vízkészlet megváltoztatása során 
nem léphetik túl a fajtára jellemző maximális értéket,
 legfeljebb azt érhetik el.

A program egy szövegfájlból olvassa be a verseny adatait! 
Az első sorban az induló lények száma szerepel. A következő 
sorok tartalmazzák a lények adatait szóközökkel elválasztva: 
=a lény nevét, a fajtáját és a kezdetben a rendelkezésre álló víz mennyiségét=.
A fajtát egy karakter azonosít: =h - homokjáró, s - szivacs, l - lépegető=.

A lényeket leíró részt követő sorban a verseny napjai szerepelnek egy karaktersorozatban.
Az egyes jelek értelmezése: =n - napos, f - felhős, e - esős=.

A program kérje be a fájl nevét, majd jelenítse meg a nyertes nevét!
(Feltehetjük, hogy a fájl formátuma helyes) Egy lehetséges bemenet:

#+begin_src text
4
Vandor h 4
Seta l 7
Csuszo s 12
Siklo s 10
nffeeennf
#+end_src

(Javaslat: Hozza létre az absztrakt lény osztályt, amelyből 
származtatja a homokjáró, szivacs és lépegető osztályokat.
A konstruktor paramétere legyen a név és a kezdeti víz mennyisége.
Vezessen be három műveletet a napoknak /(napos, felhős, esős)/ amelyek
a vízfogyasztást az élet vizsgálatával együtt, illetve mozgatják a lényt.
A végeredmény meghatározásához kell még 3 művelet: 
- él-e a lény,
- a név illetve
- a megtett távolság lekérdezése)


* DONE Megoldási terv

** Osztályok és kapcsolataik

#+begin_src plantuml :file osztaly_diagramm.png :exports results
@startuml
Leny <|-- Homokjaro
Leny <|-- Lepegeto
Leny <|-- Szivacs

Nap -left--+ Leny
Faj -right--+ Leny

enum Nap {
 +n
 +f
 +e
}

enum Faj {
 +h
 +s
 +l
}

class Leny {
 -{static}format:String
 -living:boolean
 -name:String
 -distance:int
 -water:int

 --konstruktor--
 +Leny(name:String, water:int)
 __belső működés__
 #move(int):Leny
 #saveWater(int):Leny
 #consumeWater(int):Leny
 #die():Leny

 ..Absztrakt metódusok...
 ~{abstract}getMaxWater():int
 +{abstract}napos():Leny
 +{abstract}felhos():Leny
 +{abstract}esos():Leny

 ..Getterek...
 +getWater():int
 +getName():String
 +getDistance():int
 +isLiving():boolean

 --megjelenítéshez segéd--
 +{static}header():String
 +{static}footer():String
 +toString():String
 
}

class Lepegeto {
 -maxWater:int

 --konstruktorok--
 ~Lepegeto()
 +Lepegeto(name:String, water:int)

 ..műveletek..
 +napos():Leny
 +felhos():Leny
 +esos():Leny

 ..állapotlekérdező..
 ~getMaxWater():int
}

class Homokjaro {
 -maxWater:int

 --konstruktorok--
 ~Lepegeto()
 +Lepegeto(name:String, water:int)

 ..műveletek..
 +napos():Leny
 +felhos():Leny
 +esos():Leny

 ..állapotlekérdező..
 ~getMaxWater():int
}

class Szivacs {
 -maxWater:int

 --konstruktorok--
 ~Lepegeto()
 +Lepegeto(name:String, water:int)

 ..műveletek..
 +napos():Leny
 +felhos():Leny
 +esos():Leny

 ..állapotlekérdező..
 ~getMaxWater():int
}

@enduml
#+end_src

#+RESULTS:
[[osztaly_diagramm.png]]

** Build
A beadandó során a [[http://gradle.org/][gradle]] build systemet használtam, melynek köszönhetően az alábbi parancs segítségével automatikusan letölti a teszteléshez szükséges függőségéket, buildeli a projectet, végrehajtja a unit és acceptance teszteket és végül futtatja a programot a teszt inputokkal még egyszer. A gradlew használatához csupán JRE-re van szükség, mivel a szükséges függőségeket (jdk 8, JUnit, ROBOT) automatikusan letölti.

#+begin_src sh
[ neilus@Lisa 1st_bead (master=) ]$ ./gradlew 
:buildNrun UP-TO-DATE
:compileJava
Download https://repo1.maven.org/maven2/org/slf4j/slf4j-api/1.7.18/slf4j-api-1.7.18.pom
Download https://repo1.maven.org/maven2/org/slf4j/slf4j-parent/1.7.18/slf4j-parent-1.7.18.pom
Download https://repo1.maven.org/maven2/org/slf4j/slf4j-api/1.7.18/slf4j-api-1.7.18.jar
:processResources UP-TO-DATE
:classes
:jar
:startScripts
:distTar
:distZip
:assemble
:compileTestJava
:processTestResources UP-TO-DATE
:testClasses
:test
:robot
Download https://repo1.maven.org/maven2/org/robotframework/robotframework/3.0/robotframework-3.0.pom
Download https://repo1.maven.org/maven2/org/robotframework/robotframework/3.0/robotframework-3.0.jar
========================================================================
BlackBox :: Tesztelés különböző inputokkal                              
========================================================================
Without input :: paraméter nélkül futtatva                      | PASS |
------------------------------------------------------------------------
File does not exist :: Nem létező fájlt adva paraméternek       | PASS |
------------------------------------------------------------------------
Run input1 :: Vandor kell, hogy nyerje a versenyt               | PASS |
------------------------------------------------------------------------
Run input2 :: Minden lény el kell pusztuljon a verseny végére   | PASS |
------------------------------------------------------------------------
BlackBox :: Tesztelés különböző inputokkal                      | PASS |
4 critical tests, 4 passed, 0 failed
4 tests total, 4 passed, 0 failed
========================================================================
Output:  /Users/neilus/Development/elte/progtech1/1st_bead/build/reports/robot/output.xml
Log:     /Users/neilus/Development/elte/progtech1/1st_bead/build/reports/robot/log.html
Report:  /Users/neilus/Development/elte/progtech1/1st_bead/build/reports/robot/report.html
:check
:build


A Unit teszt eredmények: ./build/reports/tests/index.html
A Blackbox teszt eredmények: ./build/reports/robot/report.html
A futtatható bináris (JAR) csomag: ./build/libs/1st_bead.jar
:input1
A nyertes versenyzo neve: Vandor
:input2
sajnos minden versenyzo meghalt. ;(

BUILD SUCCESSFUL

Total time: 28.993 secs

#+end_src

** Könyvtárstruktúra

- gradlew: gradle wrapper build script
- gradlew.bat: gradle wrapper build script windowshoz
- build.gradle: a gradle build fájl, java függőségekkel és run taskokkal
- Vagrantfile: a teszt infrastruktúrát definiáló vagrant konfiguráció
- build/classes: lefrodított Java binárisok
- src/main/java: a feladatot megoldó programkód
- src/test/input: a tesztelés során használt input fájlok
- src/test/java: JUnit teszt kódok
- src/test/robot: A blackbox teszteket tartalmazó robot kód

Generált/build-elt tartalom:
- build/libs: A project futtatható verziója JAR package formátumban
- build/reports/robot: Acceptance tesztek eredményei
- build/reports/tests: Unit tesztek eredményei


#+begin_src sh
[ neilus@Lisa 1st_bead (master=) ]$ tree
.
├── README.org
├── Vagrantfile
├── build
│   ├── classes
│   │   ├── main
│   │   │   ├── Main2.class
│   │   │   └── hu
│   │   │       └── elte
│   │   │           └── progtech1
│   │   │               └── cwjkl1
│   │   │                   ├── Homokjaro.class
│   │   │                   ├── Leny$Faj.class
│   │   │                   ├── Leny$Nap.class
│   │   │                   ├── Leny.class
│   │   │                   ├── Lepegeto.class
│   │   │                   └── Szivacs.class
│   │   └── test
│   │       └── hu
│   │           └── elte
│   │               └── progtech1
│   │                   └── cwjkl1
│   │                       ├── HomokjaroTest.class
│   │                       ├── LenyTest$TestElek.class
│   │                       ├── LenyTest.class
│   │                       ├── LepegetoTest.class
│   │                       └── SzivacsTest.class
...
│   ├── libs
│   │   └── 1st_bead.jar
│   ├── reports
│   │   ├── robot
│   │   │   ├── log.html
│   │   │   ├── output.xml
│   │   │   └── report.html
│   │   └── tests
...
│   │       ├── index.html
...
├── build.gradle
├── gradle
│   └── wrapper
│       ├── gradle-wrapper.jar
│       └── gradle-wrapper.properties
├── gradlew
├── gradlew.bat
├── gradlew.log
├── osztaly_diagramm.png
├── settings.gradle
└── src
    ├── main
    │   └── java
    │       ├── Main1.java
    │       ├── Main2.java
    │       └── hu
    │           └── elte
    │               └── progtech1
    │                   └── cwjkl1
    │                       ├── Homokjaro.java
    │                       ├── Leny.java
    │                       ├── Lepegeto.java
    │                       └── Szivacs.java
    └── test
        ├── input
        │   ├── input1.txt
        │   └── input2.txt
        ├── java
        │   └── hu
        │       └── elte
        │           └── progtech1
        │               └── cwjkl1
        │                   ├── HomokjaroTest.java
        │                   ├── LenyTest.java
        │                   ├── LepegetoTest.java
        │                   └── SzivacsTest.java
        └── robot
            └── BlackBox.robot

#+end_src

Továbbá [[https://www.virtualbox.org/][VirtualBox]] és [[https://www.vagrantup.com/][Vagrant]] eszközöket használtama fejlesztői (és teszt környezet) virtualizálásához valamint az automatizált előállításához és a szükséges szoftverek (Oracle Java 8, Jython és ROBOT) telepítéséhez. A programot 64 bites Ubuntu 14.04 LTS, valamint OS X 10.10 operációs rendszereken teszteltem. Egy szükséges ubuntu környezetet automatizálva előállít, elindít és lebuildeli, teszteli és futtatja a programot a könyvtárban kiadott alábbi parancs

#+begin_src sh
[ neilus@Lisa 1st_bead (master=) ]$ vagrant up # elinditja a virtuális gépet és a gradle taskokat
[ neilus@Lisa 1st_bead (master=) ]$ vagrant reload # újraindítja a virtuális gépet és a gradle taskokat
[ neilus@Lisa 1st_bead (master=) ]$ vagrant halt # leállítja a virtuális gépet
[ neilus@Lisa 1st_bead (master=) ]$ vagrant destroy # törli a virtuális gépet
#+end_src

* DONE A megoldáshoz szükséges típusok absztrakt leírása

** Leny absztrakt osztály

A Leny osztály tartalmazza a leszármaztatott osztályok működési logikájának vázát, valamint további segéd-függvényeket (move, saveWater, consumeWater, die) és emun adatszerkezeteket (Nap, Faj).

*** Egyedállapotot tartalmazó attribútumok
Az attribútumok értékeit a hozzájuk tartozó getter (isser) metódusokkal lehet lekérdezni az objektumtól, melyek értékeit a konstruktor inicializálja és a napoknak megfelelően változhat a verseny során.

**** living
Ez a boolean változó tárolja azt az információt, hogy az objektum példány éppen él-e, aminek következtében még versenyben lehet vagy sem, illetve tud-e még mozogni, vizet fogyasztani, raktározni.

Ezt a konstruktorból inicializáljuk /true/ értékkel és a [[die]] metódus állítja /false/-ra.

**** name
Ez az egyedpéldány nevét tartalmazza, melyet a konstruktorban van lehetőségünk beállítani.

**** distance
A verseny során megtett távolságot tárolja.


*** Segédfüggvények
Ezeket a segédfüggvényeket a leszármazott osztályok használják, legfőképp az absztrakt metódusok implementációjának egyszerűsítésére szolgálnak.

**** move
A kapott int paraméter értékével mozgatja előre a lényünket.

**** saveWater
A kapott int paraméternyi mennyiségű vizet próbál meg elraktározni a lényünk számára. Ha a lény a paramétereinek megfelően elraktározta a maximálisan elraktározható vízmennyiséget, akkor nem raktároz el több vizet.

**** consumeWater
A kapott int paraméternyi vizet fogyaszt el a lény raktározott vizéből. Ha elfogyott a vize, a [[die]] metódussal megöli a lényünket.

**** die
Megöli a lényünket, [[living]] attribútumának false-ra állításával.
     
*** Absztrakt metódusok
Ezek a metódusok a leszármazott osztályokban vannak implementálva különféle képpen tükrözve az adott faj paramétereit.
**** getMaxWater
Megmondja mennyi a maximálisan elraktározható víz a faj számára.
**** napos
Lejátsza a fajnak napos napi magatartását.
**** felhos
Lejátsza a fajnak felhős napi magatartását.
**** esos
Lejátsza a fajnak esős napi magatartását.
**** getSavingByDay, getConsumptionByDay, getDistanceByDay
A megadott [[Nap]]ra vonatkozó adott fajra vonatkozó karakterisztikát lehet vele lekérdezni.
*** Enum Nap
A különböző napokra (napos, felhős, esős) vonatkozó konstansok tárolására szolgál, valamint egyszerűsíti a szekvenciális input fájlból való adatbeolvasást. A getValue() metódusa segítségével lehet egyszerűen lekérni a napnak megfelelő int értéket, mely pl a fajra vonatkozó karakterisztikák lekérdezésénél jön kapóra.
*** Enum Faj
A különböző fajok megkülönböztetésére szolgál az input fájlból való olvasáskor hasznos.

** Homokjaro, Lepegeto es Szivacs osztályok
A fajra vonatkozó karakterisztikákat tárolja (maxWater, savedWater, consumedWater, moveDistance), valamint a különböző napokra jellemző faji magatartást.


* TODO Tesztelési terv

** TODO White-Box unit tesztek
A White-Box tesztekhez a [[http://junit.org/junit4/][JUnit]] frameworköt használtam, mely a tesztek eredményéről html formátumú jelentést készít.
** TODO Black-Box acceptance tesztek
A Black-Box tesztek implementálásához a [[http://robotframework.org/][ROBOT]] frameworköt használtam, mely a tesztek eredményeiről és futásáról html formátumú jelentést készít.
